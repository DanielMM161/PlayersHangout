// <auto-generated />
using System;
using Backend.Src.Db;
using Backend.Src.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "skill_level", new[] { "beginner", "intermediate", "experienced" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Src.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_normalized");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_cities_name");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Backend.Src.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_normalized");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("WantedId")
                        .HasColumnType("uuid")
                        .HasColumnName("wanted_id");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_genres_name");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_genres_user_id");

                    b.HasIndex("WantedId")
                        .HasDatabaseName("ix_genres_wanted_id");

                    b.ToTable("genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1500eaec-2547-45be-8cc3-38e8a42352df"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6835),
                            Name = "Pop",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6843)
                        },
                        new
                        {
                            Id = new Guid("45e4772f-96c1-4631-b1b1-560c20612a4f"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6880),
                            Name = "Rock",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6881)
                        },
                        new
                        {
                            Id = new Guid("766462bc-8eed-48b4-a898-b8b2b860a0ee"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6891),
                            Name = "Hip-hop/Rap",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6893)
                        },
                        new
                        {
                            Id = new Guid("82e2d787-f8c5-4422-a448-6e4d28931f3b"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6902),
                            Name = "Country",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6904)
                        },
                        new
                        {
                            Id = new Guid("d155955e-d0b2-455c-9010-c824cc449782"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6913),
                            Name = "R&B/Soul",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6915)
                        },
                        new
                        {
                            Id = new Guid("cdd33c2f-c4a2-4523-890e-80ad6d1a6a28"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6929),
                            Name = "Electronic/Dance",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6931)
                        },
                        new
                        {
                            Id = new Guid("cd1e3b57-1513-4fd0-a4b1-4cccb5400614"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6962),
                            Name = "Reggae",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6964)
                        },
                        new
                        {
                            Id = new Guid("2137f152-e813-495b-9aa6-f31be0eb9218"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6974),
                            Name = "Jazz",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6975)
                        },
                        new
                        {
                            Id = new Guid("acdb510f-530e-4f1d-9737-bf81c8a91fc4"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6985),
                            Name = "Blues",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6986)
                        },
                        new
                        {
                            Id = new Guid("bb152ed4-f5c3-4226-9b3b-624adb47bc03"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6996),
                            Name = "Classical",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(6998)
                        },
                        new
                        {
                            Id = new Guid("89c8f61d-08ec-4a60-98b2-eb76b752aadf"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7007),
                            Name = "Metal",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7009)
                        },
                        new
                        {
                            Id = new Guid("95591a3b-1e2a-4221-994c-89cbeca79646"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7018),
                            Name = "Death Metal",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7020)
                        },
                        new
                        {
                            Id = new Guid("cf1212cb-979b-4127-b971-9ce351b600f4"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7029),
                            Name = "Progressive Metal",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7030)
                        },
                        new
                        {
                            Id = new Guid("08861645-fe91-496d-9f99-10e695273b76"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7041),
                            Name = "Thrash Metal",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7043)
                        },
                        new
                        {
                            Id = new Guid("8dd681dd-0003-4ac6-8f7c-481eda4229e5"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7052),
                            Name = "Black Metal",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7054)
                        },
                        new
                        {
                            Id = new Guid("32537d71-fcb3-41d4-9b58-b88ea910af33"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7063),
                            Name = "Folk",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7065)
                        },
                        new
                        {
                            Id = new Guid("34d852a5-7a0a-49e1-b849-4f5e8bd87963"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7074),
                            Name = "Indie",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7076)
                        },
                        new
                        {
                            Id = new Guid("ed1bdb36-1e74-4cb8-9225-ff2ef97048ce"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7085),
                            Name = "Latin",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7087)
                        },
                        new
                        {
                            Id = new Guid("7081584b-e4fc-43ef-b371-331fc420bd75"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7097),
                            Name = "Funk",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7098)
                        },
                        new
                        {
                            Id = new Guid("de619a59-e9a3-4a45-9c7b-ba179aa1ebd6"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7107),
                            Name = "Gospel",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7109)
                        },
                        new
                        {
                            Id = new Guid("a8864421-fa42-4533-9991-2b437a08ba95"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7118),
                            Name = "Punk",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7120)
                        },
                        new
                        {
                            Id = new Guid("29692203-ca03-4335-b27d-2a81abb7d161"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7131),
                            Name = "Experimental",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7133)
                        },
                        new
                        {
                            Id = new Guid("b49a05dd-3aef-4ec3-9888-e857e0eaceea"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7142),
                            Name = "House",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7143)
                        },
                        new
                        {
                            Id = new Guid("6b9bd40f-7f56-4573-aa65-66bee1adf7a7"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7152),
                            Name = "Techno",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7154)
                        },
                        new
                        {
                            Id = new Guid("2fe9eb5d-b33f-433d-990d-a08f459297e4"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7163),
                            Name = "Dubstep",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7165)
                        },
                        new
                        {
                            Id = new Guid("4a3ed0b5-1205-4c88-badd-72ed71287284"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7174),
                            Name = "Drum and bass",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7176)
                        },
                        new
                        {
                            Id = new Guid("43cfc499-874c-4cb7-83e5-84c9a8ca1bc4"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7185),
                            Name = "Trance",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7187)
                        },
                        new
                        {
                            Id = new Guid("d674c6fc-8ce4-4d69-b4cc-a273de917773"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7196),
                            Name = "Ambient",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7197)
                        },
                        new
                        {
                            Id = new Guid("9639d6f3-83a3-4f23-a22e-afeab0515abf"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7206),
                            Name = "Acoustic",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7208)
                        },
                        new
                        {
                            Id = new Guid("0e3c38e1-0f82-482b-adcd-956a7d680625"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7219),
                            Name = "Grunge",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7221)
                        },
                        new
                        {
                            Id = new Guid("43b8d5d7-76bf-424a-9e54-606f705964e3"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7230),
                            Name = "Disco",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7232)
                        },
                        new
                        {
                            Id = new Guid("d33be709-3b60-402d-92e0-36e74f63b7c0"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7241),
                            Name = "Opera",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7242)
                        },
                        new
                        {
                            Id = new Guid("b27f201f-9f6c-4f81-a5c0-80c43592c504"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7251),
                            Name = "Swing",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7253)
                        },
                        new
                        {
                            Id = new Guid("ccc6ea1e-48ea-40d0-a744-afcbc930b049"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7284),
                            Name = "Alternative",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7286)
                        },
                        new
                        {
                            Id = new Guid("b23a05cb-fc40-4976-a6ab-e281cc8bb300"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7295),
                            Name = "J-pop",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7297)
                        },
                        new
                        {
                            Id = new Guid("10754133-de22-40bc-acd7-7ea9ce3968b5"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7306),
                            Name = "K-pop",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7308)
                        },
                        new
                        {
                            Id = new Guid("94151e70-07e9-4de3-93fd-8ac4beb33cf3"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7317),
                            Name = "Ska",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7319)
                        },
                        new
                        {
                            Id = new Guid("4889d322-7d83-47bd-b6e6-1c73ce92914d"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7330),
                            Name = "Hardcore",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7331)
                        },
                        new
                        {
                            Id = new Guid("1c6da2db-cbcd-4a2a-9be0-8e55e645b1cd"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7341),
                            Name = "Noise",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(7342)
                        });
                });

            modelBuilder.Entity("Backend.Src.Models.Instrument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_normalized");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_instruments");

                    b.ToTable("instruments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("38a74196-3585-4883-9a61-82bc8c30eb67"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(4867),
                            Name = "Electric guitar",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(4906)
                        },
                        new
                        {
                            Id = new Guid("45eb6a18-7e4e-4cdb-8c46-78a9832c3762"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5032),
                            Name = "Bass guitar",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5034)
                        },
                        new
                        {
                            Id = new Guid("47a99f37-3e03-40b5-8da2-d1db27ac9ad8"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5045),
                            Name = "Drums",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5046)
                        },
                        new
                        {
                            Id = new Guid("6d70b956-fdea-4eb0-aad3-fc81f8ef25e0"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5056),
                            Name = "Keyboard",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5058)
                        },
                        new
                        {
                            Id = new Guid("222f713e-f680-4016-adbf-7b8b28ef62a8"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5067),
                            Name = "Piano",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5069)
                        },
                        new
                        {
                            Id = new Guid("17401708-d112-4703-a8f6-4bfd6246ad13"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5080),
                            Name = "Acoustic guitar",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5082)
                        },
                        new
                        {
                            Id = new Guid("00124b52-1304-4f86-9db3-e9bca0f14eab"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5091),
                            Name = "Synthesizers",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5093)
                        },
                        new
                        {
                            Id = new Guid("6b558920-b2a7-4328-a4bf-76331e856a33"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5103),
                            Name = "Singer",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5105)
                        },
                        new
                        {
                            Id = new Guid("184a6a31-ac83-40e2-97c0-7331b031c155"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5114),
                            Name = "Percussion",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5116)
                        },
                        new
                        {
                            Id = new Guid("bd20f08c-27a6-4b54-928c-1e3f9d5b3dda"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5129),
                            Name = "Wind instruments",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5131)
                        },
                        new
                        {
                            Id = new Guid("e0e73c16-40d8-4c82-9ec6-2d01c1a57ba0"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5140),
                            Name = "Mandolin",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5142)
                        },
                        new
                        {
                            Id = new Guid("eeb5c0db-0e84-462a-9f87-14ffb009cae9"),
                            CreatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5152),
                            Name = "Harmonica",
                            NameNormalized = "",
                            UpdatedAt = new DateTime(2023, 5, 24, 13, 11, 23, 520, DateTimeKind.Local).AddTicks(5153)
                        });
                });

            modelBuilder.Entity("Backend.Src.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_location");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_location_city_id");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("Backend.Src.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<bool>("ActiveSession")
                        .HasColumnType("boolean")
                        .HasColumnName("active_session");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("last_name");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("FirstName")
                        .HasDatabaseName("ix_users_first_name");

                    b.HasIndex("LastName")
                        .HasDatabaseName("ix_users_last_name");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_location_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("FirstName", "LastName")
                        .IsUnique()
                        .HasDatabaseName("ix_users_first_name_last_name");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Backend.Src.Models.UserInstrument", b =>
                {
                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<bool>("LookingToPlay")
                        .HasColumnType("boolean")
                        .HasColumnName("looking_to_play");

                    b.Property<UserInstrument.SkillLevel>("Skill")
                        .HasColumnType("skill_level")
                        .HasColumnName("skill");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("InstrumentId", "UserId")
                        .HasName("pk_user_instrument");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_instrument_user_id");

                    b.ToTable("user_instrument", (string)null);
                });

            modelBuilder.Entity("Backend.Src.Models.Wanted", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Fullfilled")
                        .HasColumnType("boolean")
                        .HasColumnName("fullfilled");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<UserInstrument.SkillLevel>("SkillLevel")
                        .HasColumnType("skill_level")
                        .HasColumnName("skill_level");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_wanteds");

                    b.HasIndex("InstrumentId")
                        .HasDatabaseName("ix_wanteds_instrument_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_wanteds_user_id");

                    b.ToTable("wanteds", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("Backend.Src.Models.Genre", b =>
                {
                    b.HasOne("Backend.Src.Models.User", null)
                        .WithMany("Genres")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_genres_users_user_id");

                    b.HasOne("Backend.Src.Models.Wanted", null)
                        .WithMany("Genres")
                        .HasForeignKey("WantedId")
                        .HasConstraintName("fk_genres_wanteds_wanted_id");
                });

            modelBuilder.Entity("Backend.Src.Models.Location", b =>
                {
                    b.HasOne("Backend.Src.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_cities_city_id");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Backend.Src.Models.User", b =>
                {
                    b.HasOne("Backend.Src.Models.Location", "Location")
                        .WithOne()
                        .HasForeignKey("Backend.Src.Models.User", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_location_location_id");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Backend.Src.Models.UserInstrument", b =>
                {
                    b.HasOne("Backend.Src.Models.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_instrument_instruments_instrument_id");

                    b.HasOne("Backend.Src.Models.User", "User")
                        .WithMany("Instruments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_instrument_users_user_id");

                    b.Navigation("Instrument");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Src.Models.Wanted", b =>
                {
                    b.HasOne("Backend.Src.Models.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wanteds_instruments_instrument_id");

                    b.HasOne("Backend.Src.Models.User", "User")
                        .WithMany("Wanteds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wanteds_users_user_id");

                    b.Navigation("Instrument");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Backend.Src.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Backend.Src.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Backend.Src.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Backend.Src.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("Backend.Src.Models.User", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Instruments");

                    b.Navigation("Wanteds");
                });

            modelBuilder.Entity("Backend.Src.Models.Wanted", b =>
                {
                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
